/**
 * PRICES CONTROLLER
 * 
 * This controller handles all operations related to products and pricing:
 * - Getting all products with current prices
 * - Updating product prices
 * - Adding new products
 * - Searching for products
 * 
 * It uses the Supabase database for storing and retrieving product data.
 */

const { supabase } = require('../database/supabase');
const { catchAsync, AppError, handleDatabaseError } = require('../utils/errorHandler');

/**
 * @desc    Get all products with current prices
 * @route   GET /api/prices
 * @access  Private
 */
exports.getAllProducts = catchAsync(async (req, res) => {
  // Get all products
  const { data: products, error: productsError } = await supabase
    .from('products')
    .select('*')
    .order('name');
    
  if (productsError) {
    throw handleDatabaseError(productsError, 'Get all products');
  }
  
  // Get latest prices for each product
  const productIds = products.map(product => product.id);
  
  const { data: priceData, error: pricesError } = await supabase
    .from('price_board')
    .select('*')
    .in('product_id', productIds)
    .order('effective_date', { ascending: false });
    
  if (pricesError) {
    throw handleDatabaseError(pricesError, 'Get product prices');
  }
  
  // Map prices to products
  const productsWithPrices = products.map(product => {
    // Find the most recent price for this product
    const latestPrice = priceData
      .filter(p => p.product_id === product.id)
      .sort((a, b) => new Date(b.effective_date) - new Date(a.effective_date))[0];
      
    return {
      ...product,
      current_price: latestPrice ? latestPrice.price : null,
      price_effective_date: latestPrice ? latestPrice.effective_date : null
    };
  });
  
  res.json({
    success: true,
    count: products.length,
    products: productsWithPrices
  });
});

/**
 * @desc    Update a product price
 * @route   PUT /api/prices/:productId
 * @access  Private
 */
exports.updatePrice = catchAsync(async (req, res) => {
  const { productId } = req.params;
  const { price, effective_date = new Date().toISOString().split('T')[0] } = req.body;
  
  // Verify product exists
  const { data: product, error: productError } = await supabase
    .from('products')
    .select('*')
    .eq('id', productId)
    .single();
    
  if (productError) {
    throw handleDatabaseError(productError, 'Verify product exists');
  }
  
  if (!product) {
    throw new AppError('Product not found', 404);
  }
  
  // Add new price to price_board
  const { data: newPrice, error: priceError } = await supabase
    .from('price_board')
    .insert({
      product_id: productId,
      price,
      effective_date
    })
    .select()
    .single();
    
  if (priceError) {
    throw handleDatabaseError(priceError, 'Update product price');
  }
  
  res.json({
    success: true,
    message: `Price updated for ${product.name}`,
    product: {
      ...product,
      current_price: price,
      price_effective_date: effective_date
    }
  });
});

/**
 * @desc    Add a new product
 * @route   POST /api/prices/product
 * @access  Private
 */
exports.addProduct = catchAsync(async (req, res) => {
  const { name, default_unit = 'kg', aliases = [], price } = req.body;
  
  // Check if product already exists - using .maybeSingle() instead of .single()
  // to avoid errors when no rows or multiple rows are returned
  const { data: existingProducts, error: checkError } = await supabase
    .from('products')
    .select('*')
    .ilike('name', name);
    
  if (checkError) {
    throw handleDatabaseError(checkError, 'Check existing product');
  }
  
  // Check if any products with the same name already exist
  if (existingProducts && existingProducts.length > 0) {
    throw new AppError('Product with this name already exists', 400);
  }
  
  // Create new product
  const { data: product, error: productError } = await supabase
    .from('products')
    .insert({
      name,
      default_unit,
      aliases: aliases.length > 0 ? aliases : null // Handle empty arrays
    })
    .select()
    .single();
    
  if (productError) {
    throw handleDatabaseError(productError, 'Create new product');
  }
  
  // Add initial price if provided
  if (price) {
    const today = new Date().toISOString().split('T')[0];
    
    const { error: priceError } = await supabase
      .from('price_board')
      .insert({
        product_id: product.id,
        price,
        effective_date: today
      });
      
    if (priceError) {
      throw handleDatabaseError(priceError, 'Add initial price');
    }
  }
  
  res.status(201).json({
    success: true,
    message: 'Product added successfully',
    product: {
      ...product,
      current_price: price || null,
      price_effective_date: price ? new Date().toISOString().split('T')[0] : null
    }
  });
});

/**
 * @desc    Search for products
 * @route   GET /api/prices/search
 * @access  Private
 */
exports.searchProducts = catchAsync(async (req, res) => {
  const { q } = req.query;
  
  if (!q) {
    throw new AppError('Search query is required', 400);
  }
  
  // Search in product names only - more reliable approach
  // Using ilike for case-insensitive search with wildcards
  const { data: products, error } = await supabase
    .from('products')
    .select('*')
    .ilike('name', `%${q}%`);
    
  if (error) {
    throw handleDatabaseError(error, 'Search products');
  }
  
  // Log for debugging
  console.log(`Search for "${q}" found ${products.length} products`);
  
  // Get prices for found products (only if we found products)
  let priceData = [];
  if (products.length > 0) {
    const productIds = products.map(product => product.id);
    
    const { data, error: pricesError } = await supabase
      .from('price_board')
      .select('*')
      .in('product_id', productIds)
      .order('effective_date', { ascending: false });
      
    if (pricesError) {
      throw handleDatabaseError(pricesError, 'Get product prices');
    }
    
    priceData = data || [];
  }
  
  // Map prices to products
  const productsWithPrices = products.map(product => {
    // Find the most recent price for this product
    const latestPrice = priceData
      .filter(p => p.product_id === product.id)
      .sort((a, b) => new Date(b.effective_date) - new Date(a.effective_date))[0];
      
    return {
      ...product,
      current_price: latestPrice ? latestPrice.price : null,
      price_effective_date: latestPrice ? latestPrice.effective_date : null
    };
  });
  
  res.json({
    success: true,
    count: products.length,
    products: productsWithPrices
  });
});
